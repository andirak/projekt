Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

function CreateGreetingLabel {
    $label = New-Object Windows.Forms.Label
    $label.Text = "Hyper-V VM creation kit"
    $label.Font = New-Object Drawing.Font("Arial", 24, [Drawing.FontStyle]::Bold)
    $label.AutoSize = $true
    $label.Location = New-Object Drawing.Point(10, 10)
    $label.ForeColor = [System.Drawing.Color]::Black
    return $label
}

function CreateTextBox($text, $size, $location) {
    $textBox = New-Object System.Windows.Forms.TextBox
    $textBox.Text = $text
    $textBox.Multiline = $false
    $textBox.Size = $size
    $textBox.Location = $location
    return $textBox
}

function CreateLabel($text, $location) {
    $label = New-Object Windows.Forms.Label
    $label.Text = $text
    $label.AutoSize = $true
    $label.Location = $location
    $label.ForeColor = [System.Drawing.Color]::Black
    return $label
}

function CreateComboBox($items, $location) {
    $comboBox = New-Object System.Windows.Forms.ComboBox
    $comboBox.Width = 100
    $comboBox.Location = $location
    $items | ForEach-Object { [void] $comboBox.Items.Add($_) }
    $comboBox.SelectedIndex = 0
    return $comboBox
}

function ValidateInputs($vmName, $memory, $vhdSize, $vhdLocation) {
    if ([string]::IsNullOrWhiteSpace($vmName)) {
        [System.Windows.Forms.MessageBox]::Show("VM Name cannot be empty", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        return $false
    }
    if (-not [int]::TryParse($memory, [ref]$null)) {
        [System.Windows.Forms.MessageBox]::Show("Invalid memory size", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        return $false
    }
    if (-not [int]::TryParse($vhdSize, [ref]$null)) {
        [System.Windows.Forms.MessageBox]::Show("Invalid VHD size", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        return $false
    }
    if ([string]::IsNullOrWhiteSpace($vhdLocation)) {
        [System.Windows.Forms.MessageBox]::Show("VHD location cannot be empty", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        return $false
    }
    return $true
}

function CheckHyperVInstalled {
    $hypervFeature = Get-WindowsOptionalFeature -Online | Where-Object { $_.FeatureName -eq "Microsoft-Hyper-V-All" -and $_.State -eq "Enabled" }
    return $hypervFeature -ne $null
}

function OpenHyperVManager {
    Start-Process "virtmgmt.msc"
}

function CreateVirtualDisk($vmName, $memory, $vhdSize, $vhdLocation, $generation, $network) {
    try {
        # Create the VM
        $NewVMCommand = "New-VM -Name '$vmName' -MemoryStartupBytes ${memory}GB -Generation $generation"
        Invoke-Expression $NewVMCommand

        # Create VHD
        $VHDCommand = "New-VHD -Path '$vhdLocation' -SizeBytes ${vhdSize}GB"
        Invoke-Expression $VHDCommand

        # Attach VHD to VM
        $AttachVHDCommand = "Add-VMHardDiskDrive -VMName '$vmName' -Path '$vhdLocation'"
        Invoke-Expression $AttachVHDCommand

        # Configure network
        if ($network -eq "Internal") {
            $SwitchName = "InternalSwitch"
        } else {
            $SwitchName = "ExternalSwitch"
        }
        $NetAdapterCommand = "Add-VMNetworkAdapter -VMName '$vmName' -SwitchName '$SwitchName'"
        Invoke-Expression $NetAdapterCommand

        return $true
    } catch {
        [System.Windows.Forms.MessageBox]::Show("An error occurred while creating the VM: $_", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        return $false
    }
}

# Create the tab control
$TabControl = New-Object System.Windows.Forms.TabControl
$TabControl.Size = New-Object System.Drawing.Size(425, 250)
$TabControl.Location = New-Object System.Drawing.Point(10, 50)

# Create the first tab page
$TabPage1 = New-Object System.Windows.Forms.TabPage
$TabPage1.Text = "Create New VM"

# Create controls for VM creation
$VMNameBox = CreateTextBox "NewVM" (New-Object System.Drawing.Size 100, 20) (New-Object System.Drawing.Point 10, 70)
$VMNameLabel = CreateLabel "VM Name" (New-Object System.Drawing.Point 10, 50)

$MemoryComboBox = CreateComboBox @(2, 4, 6, 8, 10, 12, 14, 16) (New-Object System.Drawing.Point 200, 70)
$MemoryLabel = CreateLabel "Memory (GB)" (New-Object System.Drawing.Point 200, 50)

$VHDSizeBox = CreateTextBox "40" (New-Object System.Drawing.Size 100, 20) (New-Object System.Drawing.Point 10, 120)
$VHDSizeLabel = CreateLabel "Virtual disk size (GB)" (New-Object System.Drawing.Point 10, 100)

$VHDLocationBox = CreateTextBox "C:\temp\NewVM.vhdx" (New-Object System.Drawing.Size 200, 20) (New-Object System.Drawing.Point 200, 120)
$VHDLocationLabel = CreateLabel "VHD Location" (New-Object System.Drawing.Point 200, 100)

$GenerationComboBox = CreateComboBox @(1, 2) (New-Object System.Drawing.Point 10, 170)
$GenerationLabel = CreateLabel "Generation" (New-Object System.Drawing.Point 10, 150)

$NetworkComboBox = CreateComboBox @("Internal", "External") (New-Object System.Drawing.Point 200, 170)
$NetworkLabel = CreateLabel "Network" (New-Object System.Drawing.Point 200, 150)

$CreateButton = New-Object System.Windows.Forms.Button
$CreateButton.Location = New-Object System.Drawing.Point (10, 220)
$CreateButton.Size = New-Object System.Drawing.Size(160, 30)
$CreateButton.Font = New-Object System.Drawing.Font("Lucida Console", 18, [System.Drawing.FontStyle]::Regular)
$CreateButton.BackColor = [System.Drawing.Color]::LightGray
$CreateButton.Text = "Submit"
$CreateButton.Add_Click({
    $VMName = $VMNameBox.Text
    $MemoryIndex = $MemoryComboBox.SelectedIndex
    $VMMem = [string]$MemoryComboBox.Items[$MemoryIndex]
    $VHDX = $VHDSizeBox.Text
    $VHDLocation = $VHDLocationBox.Text
    $GenIndex = $GenerationComboBox.SelectedIndex
    $Generation = [string]$GenerationComboBox.Items[$GenIndex]
    $NetIndex = $NetworkComboBox.SelectedIndex
    $Network = [string]$NetworkComboBox.Items[$NetIndex]

    if (ValidateInputs $VMName $VMMem $VHDX $VHDLocation) {
        if (CheckHyperVInstalled) {
            if (CreateVirtualDisk $VMName $VMMem $VHDX $VHDLocation $Generation $Network) {
                [System.Windows.Forms.MessageBox]::Show("VM and virtual disk created successfully! Opening Hyper-V Manager.", "Success", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
                OpenHyperVManager
            }
        } else {
            [System.Windows.Forms.MessageBox]::Show("Hyper-V is not installed on this system.", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        }
    }
})

$TabPage1.Controls.AddRange(@(
    $VMNameBox,
    $VMNameLabel,
    $VHDSizeBox,
    $VHDSizeLabel,
    $MemoryComboBox,
    $MemoryLabel,
    $VHDLocationBox,
    $VHDLocationLabel,
    $GenerationComboBox,
    $GenerationLabel,
    $NetworkComboBox,
    $NetworkLabel,
    $CreateButton
))
# Create the second tab page
$TabPage2 = New-Object System.Windows.Forms.TabPage
$TabPage2.Text = "Import Existing VM"

# Create controls for importing an existing VM
$SearchButton = New-Object System.Windows.Forms.Button
$SearchButton.Location = New-Object System.Drawing.Point (10, 50)
$SearchButton.Size = New-Object System.Drawing.Size(100, 30)
$SearchButton.Text = "Search"
$SearchButton.Add_Click({
    $folderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog
    $folderBrowser.Description = "Select the folder containing the VM files"
    $folderBrowser.ShowDialog() | Out-Null
})

$ImportButton = New-Object System.Windows.Forms.Button
$ImportButton.Location = New-Object System.Drawing.Point (10, 90)
$ImportButton.Size = New-Object System.Drawing.Size(100, 30)
$ImportButton.Text = "Import"
$ImportButton.Add_Click({
    # Code to import the selected VM
    [System.Windows.Forms.MessageBox]::Show("Importing VM...", "Info", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
})

# Add controls to the second tab page
$TabPage2.Controls.AddRange(@(
    $SearchButton,
    $ImportButton
))

# Add the second tab page to the tab control
$TabControl.TabPages.Add($TabPage2)

# Add the first tab page to the tab control
$TabControl.TabPages.Add($TabPage1)

# Add the tab control to the form
$Form = New-Object Windows.Forms.Form
$Form.Text = "VM Creation Kit"
$Form.Width = 450
$Form.Height = 350
$Form.BackColor = [System.Drawing.Color]::White

$Form.Controls.Add($TabControl)

$Form.Add_Shown({ $Form.Activate() })
[void] $Form.ShowDialog()
